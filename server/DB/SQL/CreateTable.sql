CREATE TABLE USERS
(
  USER_NUM       SERIAL       NOT NULL,
  USER_ID        VARCHAR(100) NOT NULL,
  USER_NAME      VARCHAR(100) NOT NULL,
  USER_AGE       INT          CHECK (USER_AGE >= 0),
  FAMILY_HISTORY VARCHAR(255),
  ALLERGY        JSONB       ,
  COIN           INT         DEFAULT 0 CHECK (COIN >= 0),
  INS_DT         TIMESTAMP    DEFAULT CURRENT_TIMESTAMP,
  UPD_DT         TIMESTAMP    DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (USER_NUM)
);

COMMENT ON TABLE USERS IS '유저';
COMMENT ON COLUMN USERS.USER_NUM IS '유저 번호';
COMMENT ON COLUMN USERS.USER_ID IS '유저 아이디';
COMMENT ON COLUMN USERS.USER_NAME IS '유저 이름';
COMMENT ON COLUMN USERS.USER_AGE IS '유저 나이';
COMMENT ON COLUMN USERS.FAMILY_HISTORY IS '가족력';
COMMENT ON COLUMN USERS.ALLERGY IS '보유 알러지';
COMMENT ON COLUMN USERS.COIN IS '보유 코인';
COMMENT ON COLUMN USERS.INS_DT IS '생성일';
COMMENT ON COLUMN USERS.UPD_DT IS '수정일';

CREATE TABLE CHAT_LOG
(
  CHAT_ID    SERIAL    NOT NULL,
  MESSAGE    INT      ,
  SNDER_TYPE TEXT     ,
  SENT_DT    TIMESTAMP DEFAULT CURRENT_TIMESTAMP  CHECK (sender_type IN ('USER', 'AI')),
  USER_NUM   INT    NOT NULL,
  PRIMARY KEY (CHAT_ID)
);

COMMENT ON TABLE CHAT_LOG IS '채팅 로그';
COMMENT ON COLUMN CHAT_LOG.CHAT_ID IS '채팅 번호';
COMMENT ON COLUMN CHAT_LOG.MESSAGE IS '채팅 내용';
COMMENT ON COLUMN CHAT_LOG.SNDER_TYPE IS '채팅 유형';
COMMENT ON COLUMN CHAT_LOG.SENT_DT IS '채팅 발송일';
COMMENT ON COLUMN CHAT_LOG.USER_NUM IS '유저 번호';

CREATE TABLE DIET_DATA
(
  DATA_ID      SERIAL       NOT NULL,
  DISEASE_NAME VARCHAR(255) UNIQUE  NOT NULL,
  DATA_JSON    JSONB        NOT NULL,
  INS_DT       TIMESTAMP    DEFAULT CURRENT_TIMESTAMP,
  UPD_DT       TIMESTAMP    DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (DATA_ID)
);

COMMENT ON TABLE DIET_DATA IS '캐시 테이블';
COMMENT ON COLUMN DIET_DATA.DATA_ID IS '데이터 번호';
COMMENT ON COLUMN DIET_DATA.DISEASE_NAME IS '질병명';
COMMENT ON COLUMN DIET_DATA.DATA_JSON IS '내부 데이터/AI 캐시';
COMMENT ON COLUMN DIET_DATA.INS_DT IS '생성일';
COMMENT ON COLUMN DIET_DATA.UPD_DT IS '수정일';

CREATE TABLE PAYMENT
(
  PAY__ID     SERIAL         NOT NULL,
  PAY_AMOUNT  NUMERIC(10, 2) NOT NULL   CHECK (payment_amount > 0),
  PAY_METHOD  VARCHAR(50)   ,
  COIN_AMOUNT INT            NOT NULL   CHECK (coin_amount > 0),
  PAY_STATUS  VARCHAR(20)    DEFAULT 'SUCCESS' CHECK (payment_status IN ('SUCCESS', 'FAILED', 'PENDING')),
  PAY_DT      TIMESTAMP      DEFAULT CURRENT_TIMESTAMP,
  USER_NUM    INT         NOT NULL,
  PRIMARY KEY (PAY__ID)
);

COMMENT ON TABLE PAYMENT IS '결제';
COMMENT ON COLUMN PAYMENT.PAY__ID IS '결제 번호';
COMMENT ON COLUMN PAYMENT.PAY_AMOUNT IS '결제 금액';
COMMENT ON COLUMN PAYMENT.PAY_METHOD IS '결제 종류';
COMMENT ON COLUMN PAYMENT.COIN_AMOUNT IS '결제 코인';
COMMENT ON COLUMN PAYMENT.PAY_STATUS IS '결제 상태';
COMMENT ON COLUMN PAYMENT.PAY_DT IS '결제일';
COMMENT ON COLUMN PAYMENT.USER_NUM IS '유저 번호';

CREATE TABLE REFUND
(
  REF_ID     SERIAL       NOT NULL,
  REF_AMOUNT NUMBER(10,2) NOT NULL CHECK (refund_amount > 0),
  REF_REASON VARCHAR(255),
  REF_STATUS VARCHAR(20)  DEFAULT 'REQUESTED' CHECK (refund_status IN ('REQUESTED', 'APPROVED', 'DENIED')),
  REF_DT     TIMESTAMP    DEFAULT CURRENT_TIMESTAMP,
  USER_NUM   INT          NOT NULL,
  PAY__ID    INT          NOT NULL,
  PRIMARY KEY (REF_ID)
);

COMMENT ON TABLE REFUND IS '환불';
COMMENT ON COLUMN REFUND.REF_ID IS '환불 번호';
COMMENT ON COLUMN REFUND.REF_AMOUNT IS '환불 금액';
COMMENT ON COLUMN REFUND.REF_REASON IS '환불 사유';
COMMENT ON COLUMN REFUND.REF_STATUS IS '환불 상태';
COMMENT ON COLUMN REFUND.REF_DT IS '환불일';
COMMENT ON COLUMN REFUND.USER_NUM IS '유저 번호';
COMMENT ON COLUMN REFUND.PAY__ID IS '결제 번호';

ALTER TABLE CHAT_LOG
  ADD CONSTRAINT FK_USERS_TO_CHAT_LOG
    FOREIGN KEY (USER_NUM)
    REFERENCES USERS (USER_NUM);

ALTER TABLE PAYMENT
  ADD CONSTRAINT FK_USERS_TO_PAYMENT
    FOREIGN KEY (USER_NUM)
    REFERENCES USERS (USER_NUM);

ALTER TABLE REFUND
  ADD CONSTRAINT FK_USERS_TO_REFUND
    FOREIGN KEY (USER_NUM)
    REFERENCES USERS (USER_NUM);

ALTER TABLE REFUND
  ADD CONSTRAINT FK_PAYMENT_TO_REFUND
    FOREIGN KEY (PAY__ID)
    REFERENCES PAYMENT (PAY__ID);